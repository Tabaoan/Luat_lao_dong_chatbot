# ===================== IMPORTS =====================
import os, re, io
from typing import Dict, Any, List
from pathlib import Path

from chromadb.config import Settings
from dotenv import load_dotenv
load_dotenv(override=True)

from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_core.runnables import RunnableLambda
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.documents import Document
from langchain_chroma import Chroma
from langchain_core.messages import SystemMessage, HumanMessage, BaseMessage, AIMessage 


# ===================== ENV =====================
OPENAI__API_KEY = os.getenv("OPENAI__API_KEY")
OPENAI__EMBEDDING_MODEL = os.getenv("OPENAI__EMBEDDING_MODEL")
OPENAI__MODEL_NAME = os.getenv("OPENAI__MODEL_NAME")
OPENAI__TEMPERATURE = os.getenv("OPENAI__TEMPERATURE")

llm = ChatOpenAI(
    api_key=OPENAI__API_KEY,
    model_name=OPENAI__MODEL_NAME,
    temperature=float(OPENAI__TEMPERATURE) if OPENAI__TEMPERATURE else 0
)

# ===================== VECTORDB =====================
VECTORDB_PATH = r"./vectordb_storage"


emb = OpenAIEmbeddings(api_key=OPENAI__API_KEY, model=OPENAI__EMBEDDING_MODEL)

vectordb = None
retriever = None



# ===================== SYSTEM PROMPT =====================
PDF_READER_SYS = (
    "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ph√°p l√Ω chuy√™n ƒë·ªçc hi·ªÉu v√† tra c·ª©u c√°c t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p "
    "(bao g·ªìm: Lu·∫≠t, Ngh·ªã ƒë·ªãnh, Quy·∫øt ƒë·ªãnh, Th√¥ng t∆∞, VƒÉn b·∫£n h·ª£p nh·∫•t, Quy ho·∫°ch, Danh m·ª•c khu c√¥ng nghi·ªáp, v.v.). "
    "Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr√≠ch xu·∫•t v√† tr·∫£ l·ªùi ch√≠nh x√°c c√°c th√¥ng tin c√≥ trong t√†i li·ªáu, "
    "ƒë·∫∑c bi·ªát li√™n quan ƒë·∫øn Lao ƒë·ªông, D√¢n s·ª± v√† c√°c Khu c√¥ng nghi·ªáp, C·ª•m c√¥ng nghi·ªáp t·∫°i Vi·ªát Nam.\n\n"

    
    "‚öôÔ∏è QUY T·∫ÆC ƒê·∫∂C BI·ªÜT:\n"
    "- N·∫øu ng∆∞·ªùi d√πng ch·ªâ ch√†o h·ªèi ho·∫∑c ƒë·∫∑t c√¢u h·ªèi chung chung (v√≠ d·ª•: 'xin ch√†o', 'b·∫°n l√†m ƒë∆∞·ª£c g√¨', 'gi√∫p t√¥i v·ªõi' ...), "
    "h√£y tr·∫£ l·ªùi nguy√™n vƒÉn nh∆∞ sau:\n"
    "'Xin ch√†o! M√¨nh l√† Chatbot C·ªïng vi·ªác l√†m Vi·ªát Nam. M√¨nh c√≥ th·ªÉ gi√∫p anh/ch·ªã tra c·ª©u v√† gi·∫£i th√≠ch c√°c quy ƒë·ªãnh ph√°p lu·∫≠t "
    "(lu·∫≠t, ngh·ªã ƒë·ªãnh, th√¥ng t∆∞...) li√™n quan ƒë·∫øn lao ƒë·ªông, vi·ªác l√†m, d√¢n s·ª± v√† c√°c lƒ©nh v·ª±c ph√°p l√Ω kh√°c. "
    "G√µ c√¢u h·ªèi c·ª• th·ªÉ ho·∫∑c m√¥ t·∫£ t√¨nh hu·ªëng nh√© ‚Äî m√¨nh s·∫Ω tr·∫£ l·ªùi ng·∫Øn g·ªçn, c√≥ d·∫´n ngu·ªìn.'\n\n"

    "üìò NGUY√äN T·∫ÆC CHUNG KHI TR·∫¢ L·ªúI:\n"
    "1) Ph·∫°m vi: Ch·ªâ d·ª±a v√†o n·ªôi dung trong c√°c t√†i li·ªáu ƒë√£ ƒë∆∞·ª£c cung c·∫•p; tuy·ªát ƒë·ªëi kh√¥ng s·ª≠ d·ª•ng ho·∫∑c suy di·ªÖn ki·∫øn th·ª©c b√™n ngo√†i.\n"
    "2) Ngu·ªìn tr√≠ch d·∫´n: Khi c√≥ th·ªÉ, ch·ªâ ghi r√µ ngu·ªìn theo quy ƒë·ªãnh (v√≠ d·ª•: Theo ƒêi·ªÅu X, Ngh·ªã ƒë·ªãnh s·ªë Y/Nƒê-CP...), "
    "nh∆∞ng kh√¥ng ƒë∆∞·ª£c ghi theo d·∫°ng li·ªát k√™ t√†i li·ªáu nh∆∞ [1], [2], [3]... Kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng ho·∫∑c nh·∫Øc ƒë·∫øn c·ª•m t·ª´ nh∆∞:'t√†i li·ªáu PDF', 'tr√≠ch t·ª´ t√†i li·ªáu PDF', 'd∆∞·ªõi ƒë√¢y l√† th√¥ng tin t·ª´ t√†i li·ªáu PDF', ho·∫∑c c√°c c·ª•m t∆∞∆°ng t·ª±."
    "Thay v√†o ƒë√≥, ch·ªâ n√™u tr·ª±c ti·∫øp n·ªôi dung ph√°p lu·∫≠t, v√≠ d·ª•: 'Th√¥ng tin li√™n quan ƒë·∫øn Lu·∫≠t Vi·ªác l√†m quy ƒë·ªãnh r·∫±ng...'.\n"
    "3) Ng√¥n ng·ªØ: S·ª≠ d·ª•ng vƒÉn phong ph√°p l√Ω, trung l·∫≠p, r√µ r√†ng v√† t√¥n tr·ªçng ng·ªØ ƒëi·ªáu h√†nh ch√≠nh.\n"
    "4) Tr√¨nh b√†y: ∆Øu ti√™n tr√¨nh b√†y d∆∞·ªõi d·∫°ng danh s√°ch (s·ªë th·ª© t·ª± ho·∫∑c g·∫°ch ƒë·∫ßu d√≤ng) ƒë·ªÉ d·ªÖ theo d√µi; "
    "tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng k√Ω hi·ªáu in ƒë·∫≠m (** ho·∫∑c __) trong b·∫•t k·ª≥ ph·∫ßn tr·∫£ l·ªùi n√†o.\n"
    "5) N·∫øu th√¥ng tin kh√¥ng c√≥: Tr·∫£ l·ªùi r√µ r√†ng: 'Th√¥ng tin n√†y kh√¥ng c√≥ trong t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p.'\n"
    "6) N·∫øu c√¢u h·ªèi m∆° h·ªì: Y√™u c·∫ßu ng∆∞·ªùi d√πng l√†m r√µ ho·∫∑c b·ªï sung chi ti·∫øt ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c h∆°n.\n"
 
    
"Kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng ho·∫∑c nh·∫Øc ƒë·∫øn c·ª•m t·ª´ nh∆∞: " "'t√†i li·ªáu PDF', 'tr√≠ch t·ª´ t√†i li·ªáu PDF', 'd∆∞·ªõi ƒë√¢y l√† th√¥ng tin t·ª´ t√†i li·ªáu PDF', ho·∫∑c c√°c c·ª•m t∆∞∆°ng t·ª±. " 
    "Thay v√†o ƒë√≥, ch·ªâ n√™u tr·ª±c ti·∫øp n·ªôi dung ph√°p lu·∫≠t, v√≠ d·ª•: 'Th√¥ng tin li√™n quan ƒë·∫øn Lu·∫≠t Vi·ªác l√†m quy ƒë·ªãnh r·∫±ng...'.\n"

    "üè≠ QUY ƒê·ªäNH RI√äNG ƒê·ªêI V·ªöI C√ÅC KHU C√îNG NGHI·ªÜP / C·ª§M C√îNG NGHI·ªÜP:\n"
    "1) N·∫øu ng∆∞·ªùi d√πng h·ªèi 'T·ªânh/th√†nh ph·ªë n√†o c√≥ bao nhi√™u khu ho·∫∑c c·ª•m c√¥ng nghi·ªáp', "
    "h√£y tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng sau:\n"
    "   - S·ªë l∆∞·ª£ng khu/c·ª•m c√¥ng nghi·ªáp trong t·ªânh ho·∫∑c th√†nh ph·ªë ƒë√≥.\n"
    "   - Danh s√°ch t√™n c·ªßa t·∫•t c·∫£ c√°c khu/c·ª•m.\n\n"
    "   V√≠ d·ª•:\n"
    "   'T·ªânh B√¨nh D∆∞∆°ng c√≥ 29 khu c√¥ng nghi·ªáp. Bao g·ªìm:\n"
    "   - Khu c√¥ng nghi·ªáp S√≥ng Th·∫ßn 1\n"
    "   - Khu c√¥ng nghi·ªáp VSIP 1\n"
    "   - Khu c√¥ng nghi·ªáp M·ªπ Ph∆∞·ªõc 3\n"
    "   ...'\n\n"

    "2) N·∫øu ng∆∞·ªùi d√πng h·ªèi chi ti·∫øt v·ªÅ m·ªôt khu/c·ª•m c√¥ng nghi·ªáp c·ª• th·ªÉ (l·∫ßn ƒë·∫ßu ti√™n), h√£y tr√¨nh b√†y ƒë·∫ßy ƒë·ªß th√¥ng tin (n·∫øu c√≥ trong t√†i li·ªáu), g·ªìm:\n"
    "   - T√™n khu c√¥ng nghi·ªáp / c·ª•m c√¥ng nghi·ªáp\n"
    "   - ƒê·ªãa ƒëi·ªÉm (t·ªânh/th√†nh ph·ªë, huy·ªán/th·ªã x√£)\n"
    "   - Di·ªán t√≠ch (ha ho·∫∑c m¬≤)\n"
    "   - C∆° quan qu·∫£n l√Ω / ch·ªß ƒë·∫ßu t∆∞\n"
    "   - Quy·∫øt ƒë·ªãnh th√†nh l·∫≠p ho·∫∑c ph√™ duy·ªát quy ho·∫°ch\n"
    "   - Ng√†nh ngh·ªÅ ho·∫°t ƒë·ªông ch√≠nh\n"
    "   - T√¨nh tr·∫°ng ho·∫°t ƒë·ªông (ƒëang ho·∫°t ƒë·ªông / ƒëang quy ho·∫°ch / ƒëang x√¢y d·ª±ng)\n"
    "   - C√°c th√¥ng tin kh√°c li√™n quan (n·∫øu c√≥)\n\n"

    "3) N·∫øu ng∆∞·ªùi d√πng ti·∫øp t·ª•c h·ªèi chi ti·∫øt v·ªÅ c√°c c·ª•m ho·∫∑c khu c√¥ng nghi·ªáp (t·ª´ l·∫ßn th·ª© hai tr·ªü ƒëi), "
    "h√£y kh√¥ng li·ªát k√™ l·∫°i th√¥ng tin chi ti·∫øt, m√† tr·∫£ l·ªùi c·ªë ƒë·ªãnh nh∆∞ sau:\n"
    "'N·∫øu b·∫°n mu·ªën bi·∫øt th√™m th√¥ng tin chi ti·∫øt v·ªÅ c√°c c·ª•m, h√£y truy c·∫≠p v√†o website https://iipmap.com/.'\n\n"

    "4) N·∫øu ng∆∞·ªùi d√πng ch·ªâ h·ªèi th·ªëng k√™ (v√≠ d·ª•: 'T·ªânh B·∫Øc Ninh c√≥ bao nhi√™u c·ª•m c√¥ng nghi·ªáp?'), "
    "h√£y lu√¥n tr·∫£ l·ªùi s·ªë l∆∞·ª£ng v√† li·ªát k√™ t√™n c·ª•m/khu theo quy ƒë·ªãnh t·∫°i m·ª•c (1) ·ªü tr√™n.\n\n"

    "5) N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u ngo√†i ph·∫°m vi ph√°p lu·∫≠t ho·∫∑c khu/c·ª•m c√¥ng nghi·ªáp "
    "(v√≠ d·ª•: h·ªèi v·ªÅ tuy·ªÉn d·ª•ng, gi√° ƒë·∫•t, ƒë·∫ßu t∆∞ c√° nh√¢n, v.v.), "
    "h√£y tr·∫£ l·ªùi nguy√™n vƒÉn nh∆∞ sau:\n"
    "'Anh/ch·ªã vui l√≤ng ƒë·ªÉ l·∫°i t√™n v√† s·ªë ƒëi·ªán tho·∫°i, chuy√™n gia c·ªßa IIP s·∫Ω li√™n h·ªá v√† gi·∫£i ƒë√°p c√°c y√™u c·∫ßu c·ªßa anh/ch·ªã ·∫°.'\n\n"
)

# ===================== VECTORDB UTILS =====================
def build_context_from_hits(hits, max_chars: int = 6000) -> str:
    """X√¢y d·ª±ng context t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm"""
    ctx = []
    total = 0
    for idx, h in enumerate(hits, start=1):
        source = h.metadata.get('source', 'unknown')
        # Thay ƒë·ªïi f"[{idx}] (Ngu·ªìn: {source})" th√†nh ch·ªâ ngu·ªìn ƒë·ªÉ t·ªëi gi·∫£n
        seg = f"[Ngu·ªìn: {source}, Trang: {h.metadata.get('page', '?')}]\n{h.page_content.strip()}"
        if total + len(seg) > max_chars:
            break
        ctx.append(seg)
        total += len(seg)
    return "\n\n".join(ctx)

def get_existing_sources() -> set:
    """L·∫•y danh s√°ch file ƒë√£ c√≥ trong VectorDB"""
    global vectordb
    
    if vectordb is None:
        return set()
    
    try:
        collection = vectordb._collection
        existing_data = collection.get()
        
        if existing_data and existing_data.get('metadatas'):
            return set(m.get('source', '') for m in existing_data['metadatas'] if m and m.get('source'))
        
        return set()
    except Exception as e:
        # print(f"‚ö†Ô∏è L·ªói khi l·∫•y danh s√°ch file: {e}")
        return set()

def check_vectordb_exists() -> bool:
    """Ki·ªÉm tra xem VectorDB c√≥ document n√†o kh√¥ng"""
    global vectordb
    
    if vectordb is None:
        return False
    
    try:
        collection = vectordb._collection
        count = collection.count()
        return count > 0
        
    except Exception as e:
        # print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra VectorDB: {e}")
        return False

def get_vectordb_stats() -> Dict[str, Any]:
    """L·∫•y th√¥ng tin th·ªëng k√™ v·ªÅ VectorDB"""
    global vectordb
    
    if vectordb is None:
        return {"total_documents": 0, "path": VECTORDB_PATH, "exists": False}
    
    try:
        collection = vectordb._collection
        count = collection.count()
        
        # L·∫•y danh s√°ch file ƒë√£ n·∫°p
        sources = get_existing_sources()
        
        return {
            "total_documents": count,
            "path": VECTORDB_PATH,
            "exists": count > 0,
            "sources": list(sources)
        }
    except Exception as e:
        return {
            "total_documents": 0,
            "path": VECTORDB_PATH,
            "exists": False,
            "error": str(e)
        }



def load_vectordb(vectordb_path=None, emb_fn=None):
    """Load VectorDB t·ª´ th∆∞ m·ª•c l∆∞u tr·ªØ (Ch·ªâ ƒê·ªçc)"""
    global vectordb, retriever
    
    vectordb_path = vectordb_path if vectordb_path is not None else VECTORDB_PATH
    emb_fn = emb_fn if emb_fn is not None else emb

    try:
        # Load VectorDB t·ª´ th∆∞ m·ª•c
        vectordb = Chroma(
            collection_name="luat_tong_hop_v1",
            embedding_function=emb_fn,
            persist_directory=vectordb_path,
        )
        
        # Ki·ªÉm tra xem c√≥ document n√†o kh√¥ng
        if vectordb._collection.count() == 0:
            print(f"‚ùå VectorDB t·∫°i '{vectordb_path}' kh√¥ng c√≥ document n√†o.")
            vectordb = None
            retriever = None
            return None
            
        # C·∫≠p nh·∫≠t retriever
        retriever = vectordb.as_retriever(search_kwargs={"k": 50})
        return vectordb
        
    except Exception as e:
        print(f"‚ùå L·ªói khi load VectorDB: {e}")
        vectordb = None
        retriever = None
        return None

# ===================== CLEANING & RETRIEVAL =====================
_URL_RE = re.compile(r"https?://[^\s]+", re.IGNORECASE)

def clean_question_remove_uris(text: str) -> str:
    """L√†m s·∫°ch c√¢u h·ªèi, lo·∫°i b·ªè URL v√† t√™n file PDF"""
    txt = _URL_RE.sub(" ", text or "")
    toks = re.split(r"\s+", txt)
    toks = [t for t in toks if not t.lower().endswith(".pdf")]
    return " ".join(toks).strip()

# Chu·ªói tr·∫£ l·ªùi c·ªë ƒë·ªãnh theo Quy t·∫Øc 3
FIXED_RESPONSE_Q3 = 'N·∫øu b·∫°n mu·ªën bi·∫øt th√™m th√¥ng tin chi ti·∫øt v·ªÅ c√°c c·ª•m, h√£y truy c·∫≠p v√†o website https://iipmap.com/.'

def is_detail_query(text: str) -> bool:
    """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ph·∫£i l√† c√¢u h·ªèi chi ti·∫øt v·ªÅ khu/c·ª•m c√¥ng nghi·ªáp hay kh√¥ng"""
    text_lower = text.lower()
    keywords = ["n√™u chi ti·∫øt", "chi ti·∫øt v·ªÅ", "th√¥ng tin chi ti·∫øt", "c·ª•m c√¥ng nghi·ªáp", "khu c√¥ng nghi·ªáp"]
    if any(k in text_lower for k in keywords):
        # Tr√°nh nh·∫ßm l·∫´n v·ªõi c√¢u h·ªèi th·ªëng k√™
        if "c√≥ bao nhi√™u" in text_lower or "th·ªëng k√™" in text_lower:
            return False
        return True
    return False

def count_previous_detail_queries(history: List[BaseMessage]) -> int:
    """ƒê·∫øm s·ªë l·∫ßn h·ªèi chi ti·∫øt v·ªÅ KCN/CCN ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥ (l·∫ßn ƒë·∫ßu ƒë∆∞·ª£c t√≠nh l√† 0)"""
    count = 0
    # L·∫∑p qua l·ªãch s·ª≠ t·ª´ tin nh·∫Øn c≈© nh·∫•t ƒë·∫øn tin nh·∫Øn g·∫ßn nh·∫•t
    for i in range(len(history)):
        current_message = history[i]
        
        # Ch·ªâ x√©t tin nh·∫Øn HumanMessage v√† tin nh·∫Øn Bot (AIMessage) li·ªÅn k·ªÅ
        if isinstance(current_message, HumanMessage):
            # Ki·ªÉm tra xem tin nh·∫Øn ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† c√¢u h·ªèi chi ti·∫øt kh√¥ng
            is_q = is_detail_query(current_message.content)
            
            # Ki·ªÉm tra c√¢u tr·∫£ l·ªùi li·ªÅn k·ªÅ c·ªßa Bot
            if is_q and i + 1 < len(history) and isinstance(history[i+1], AIMessage):

                bot_response = history[i+1].content
                if FIXED_RESPONSE_Q3 not in bot_response:
                    count += 1
                
    return count

def process_pdf_question(i: Dict[str, Any]) -> str:
    """X·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng"""
    global retriever
    
    message = i["message"]
    history: List[BaseMessage] = i.get("history", [])

    # ************************************************
    # B·ªî SUNG LOGIC CHO QUY T·∫ÆC 3 T·∫†I ƒê√ÇY
    # ************************************************
    clean_question = clean_question_remove_uris(message)
    
    if is_detail_query(clean_question):
        count_detail_queries = count_previous_detail_queries(history)

        if count_detail_queries >= 1: 
            return FIXED_RESPONSE_Q3
        
    # KI·ªÇM TRA VECTORDB ƒê√É S·∫¥N S√ÄNG CH∆ØA
    if retriever is None:
        return "‚ùå VectorDB ch∆∞a ƒë∆∞·ª£c load ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n l∆∞u tr·ªØ."

    
    try:
        # T√¨m ki·∫øm trong VectorDB
        hits = retriever.invoke(clean_question)
        
        if not hits:
            # S·ª≠a th√¥ng b√°o ƒë·ªÉ ph√π h·ª£p v·ªõi vi·ªác ch·ªâ ƒë·ªçc t·ª´ DB
            return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong d·ªØ li·ªáu hi·ªán c√≥."

        # X√¢y d·ª±ng context t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm
        context = build_context_from_hits(hits, max_chars=6000)
        
        # T·∫°o messages
        messages = [SystemMessage(content=PDF_READER_SYS)]

        if history:
            messages.extend(history[-10:]) 

        user_message = f"""C√¢u h·ªèi: {clean_question}

N·ªôi dung li√™n quan t·ª´ t√†i li·ªáu:
{context}

H√£y tr·∫£ l·ªùi d·ª±a tr√™n c√°c n·ªôi dung tr√™n."""
        
        messages.append(HumanMessage(content=user_message))
        
        # G·ªçi LLM
        response = llm.invoke(messages).content
        

        return response

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return f"Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"

# ===================== MAIN CHATBOT =====================
pdf_chain = RunnableLambda(process_pdf_question)
store: Dict[str, ChatMessageHistory] = {}

def get_history(session_id: str):
    """L·∫•y ho·∫∑c t·∫°o l·ªãch s·ª≠ chat cho session"""
    if session_id not in store:
        store[session_id] = ChatMessageHistory()
    return store[session_id]

chatbot = RunnableWithMessageHistory(
    pdf_chain,
    get_history,
    input_messages_key="message",
    history_messages_key="history"
)

def print_help():
    """In h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    print("\n" + "="*60)
    print("üìö C√ÅC L·ªÜNH C√ì S·∫¥N:")
    print("="*60)
    print(" - exit / quit ¬†: Tho√°t ch∆∞∆°ng tr√¨nh")
    print(" - clear ¬† ¬† ¬† ¬†: X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i")
    # print(" - sync ¬† ¬† ¬† ¬† : (B·ªã v√¥ hi·ªáu h√≥a - Ch·∫ø ƒë·ªô ch·ªâ ƒë·ªçc)")
    # print(" - reload ¬† ¬† ¬† : (B·ªã v√¥ hi·ªáu h√≥a - Ch·∫ø ƒë·ªô ch·ªâ ƒë·ªçc)")
    print(" - status ¬† ¬† ¬† : Ki·ªÉm tra tr·∫°ng th√°i VectorDB")
    print(" - help ¬† ¬† ¬† ¬† : Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y")
    print("="*60 + "\n")

def handle_command(command: str, session: str) -> bool:
    """X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát"""
    global vectordb, retriever
    cmd = command.lower().strip()

    if cmd in {"exit", "quit"}:
        print("\nüëã T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i!")
        return False
    
    elif cmd == "clear":
        if session in store:
            store[session].clear()
            print("üßπ ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i.\n")
        return True
    

    elif cmd == "status":
        stats = get_vectordb_stats()
        print("\n" + "="*60)
        print("üìä TR·∫†NG TH√ÅI VECTORDB (CH·∫æ ƒê·ªò CH·ªà ƒê·ªåC)")
        print("="*60)
        if stats["exists"]:
            print(f"‚úÖ Tr·∫°ng th√°i: S·∫µn s√†ng")
            print(f"üìä T·ªïng documents: {stats['total_documents']}")
            print(f"üìÇ ƒê∆∞·ªùng d·∫´n: {stats['path']}")
            print(f"üìò C√°c file ƒë√£ n·∫°p:")
            for src in stats.get('sources', []):
                print(f" ¬† - {src}")
        else:
            print("‚ùå Tr·∫°ng th√°i: Ch∆∞a s·∫µn s√†ng")
            print("üí° Kh√¥ng th·ªÉ load VectorDB. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† d·ªØ li·ªáu ƒë√£ n·∫°p.")
        print("="*60 + "\n")
        return True
    
    elif cmd == "help":
        print_help()
        return True
    
    else:
        return True

# ===================== CLI =====================
if __name__ == "__main__":
    session = "pdf_reader_session"

    print("\n" + "="*60)
    print("ü§ñ CHATBOT C·ªîNG VI·ªÜC L√ÄM VI·ªÜT NAM (CH·ªà ƒê·ªåC VECTRORDB)")
    print("="*60)
    print(f"üìÇ VectorDB: {VECTORDB_PATH}")
    print("üîç T√¥i h·ªó tr·ª£: Lu·∫≠t Lao ƒë·ªông & Lu·∫≠t D√¢n s·ª± Vi·ªát Nam")
    print_help()

    # KH·ªûI T·∫†O VectorDB b·∫±ng c√°ch LOAD T·ª™ ƒêƒ®A
    print("üì• ƒêang load VectorDB t·ª´ th∆∞ m·ª•c l∆∞u tr·ªØ...")
    result = load_vectordb()
    
    if result is None:
        print("‚ùå KH√îNG TH·ªÇ LOAD VECTORDB. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† d·ªØ li·ªáu ƒë√£ n·∫°p tr∆∞·ªõc ƒë√≥.")
        exit(1)

    # In th·ªëng k√™ sau khi load
    stats = get_vectordb_stats()
    print(f"‚úÖ VectorDB s·∫µn s√†ng v·ªõi {stats['total_documents']} documents")
    print(f"üìö ƒê√£ n·∫°p: {', '.join(stats.get('sources', []))}\n")
    
    print("üí¨ S·∫µn s√†ng tr·∫£ l·ªùi c√¢u h·ªèi! (G√µ 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n)\n")

    # Main loop
    while True:
        try:
            message = input("üë§ B·∫°n: ").strip()
            
            if not message:
                continue
            
            # X·ª≠ l√Ω l·ªánh
            if not handle_command(message, session):
                break
            
            # B·ªè qua n·∫øu l√† l·ªánh
            if message.lower() in ["clear", "status", "help"]: 
                continue
            
            # X·ª≠ l√Ω c√¢u h·ªèi th∆∞·ªùng
            print("üîé ƒêang t√¨m ki·∫øm trong t√†i li·ªáu...")
            response = chatbot.invoke(
                {"message": message},
                config={"configurable": {"session_id": session}}
            )
            print(f"\nü§ñ Bot: {response}\n")
            print("-" * 60 + "\n")
            
        except KeyboardInterrupt:
            print("\n\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"\n‚ùå L·ªói: {e}\n")