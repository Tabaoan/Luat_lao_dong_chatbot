from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import uvicorn
from typing import Optional, Any
# Import th∆∞ vi·ªán c·∫ßn thi·∫øt cho vi·ªác ch·∫°y h√†m ƒë·ªìng b·ªô (n·∫øu chatbot l√† ƒë·ªìng b·ªô)
from starlette.concurrency import run_in_threadpool 

try:
    import app
except ImportError:
    app = None
    print("WARNING: Could not import 'app' module. Using mock response.")

# --- Khai b√°o Model cho d·ªØ li·ªáu ƒë·∫ßu v√†o ---
# FastAPI s·ª≠ d·ª•ng Pydantic ƒë·ªÉ ƒë·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu
class Question(BaseModel):
    """ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu JSON ƒë·∫ßu v√†o."""
    question: str

# ---------------------------------------
# 1Ô∏è‚É£ Kh·ªüi t·∫°o FastAPI App + b·∫≠t CORS
# ---------------------------------------
# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app_fastapi = FastAPI(
    title="Chatbot Lu·∫≠t Lao ƒë·ªông API",
    description="API cho m√¥ h√¨nh chatbot",
    version="1.0.0"
)

# üîπ C·∫•u h√¨nh CORS Middleware
# Cho ph√©p t·∫•t c·∫£ c√°c domain (origins=["*"]) ho·∫∑c domain c·ª• th·ªÉ.
origins = [
    "*", # Cho ph√©p t·∫•t Ìóàdomain g·ªçi API n√†y
    # "https://chatbotlaodong.vn", # N·∫øu b·∫°n ch·ªâ mu·ªën cho ph√©p domain c·ª• th·ªÉ
]

app_fastapi.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---------------------------------------
# 2Ô∏è‚É£ Route ki·ªÉm tra ho·∫°t ƒë·ªông (GET /)
# ---------------------------------------
@app_fastapi.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i API")
async def home():
    """Route ki·ªÉm tra xem API c√≥ ho·∫°t ƒë·ªông kh√¥ng."""
    return {
        "message": "‚úÖ Chatbot Lu·∫≠t Lao ƒë·ªông API ƒëang ho·∫°t ƒë·ªông.",
        "usage": "G·ª≠i POST t·ªõi /chat v·ªõi JSON { 'question': 'C√¢u h·ªèi c·ªßa b·∫°n' }"
    }

# ---------------------------------------
# 3Ô∏è‚É£ Route ch√≠nh: /chat (POST)
# ---------------------------------------
# ƒê√£ ƒë·ªïi t·ª´ /predict sang /chat ƒë·ªÉ kh·ªõp v·ªõi client
@app_fastapi.post("/chat", summary="D·ª± ƒëo√°n/Tr·∫£ l·ªùi c√¢u h·ªèi t·ª´ Chatbot")
async def predict(data: Question):
    """
    Nh·∫≠n c√¢u h·ªèi v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª´ m√¥ h√¨nh chatbot.
    """
    question = data.question.strip()

    if not question:
        # FastAPI t·ª± ƒë·ªông validate JSON theo Pydantic, nh∆∞ng ki·ªÉm tra th√™m tr∆∞·ªùng h·ª£p r·ªóng
        raise HTTPException(status_code=400, detail="Thi·∫øu tr∆∞·ªùng 'question' trong JSON ho·∫∑c c√¢u h·ªèi b·ªã r·ªóng.")

    try:
        answer = None
        
        # ‚úÖ G·ªçi chatbot th·ª±c t·∫ø n·∫øu c√≥ (Gi·∫£ ƒë·ªãnh app.py c√≥ ch·ª©a ƒë·ªëi t∆∞·ª£ng chatbot)
        if hasattr(app, "chatbot"):
            session = "api_session" # ID session c·ªë ƒë·ªãnh cho API call
            
            # Ki·ªÉm tra xem app.chatbot.invoke c√≥ ph·∫£i l√† h√†m b·∫•t ƒë·ªìng b·ªô (coroutine) kh√¥ng
            if hasattr(app.chatbot.invoke, '__code__') and app.chatbot.invoke.__code__.co_flags & 0x80:
                # N·∫øu l√† async (b·∫•t ƒë·ªìng b·ªô), d√πng await tr·ª±c ti·∫øp
                response = await app.chatbot.invoke(
                    {"message": question},
                    config={"configurable": {"session_id": session}}
                )
            else:
                # N·∫øu l√† sync (ƒë·ªìng b·ªô), ch·∫°y n√≥ trong thread pool ƒë·ªÉ kh√¥ng ch·∫∑n server ch√≠nh
                response = await run_in_threadpool(
                    app.chatbot.invoke,
                    {"message": question},
                    config={"configurable": {"session_id": session}}
                )
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
            if isinstance(response, dict) and 'output' in response:
                 answer = response['output']
            elif isinstance(response, str):
                 answer = response
            else:
                 answer = f"L·ªói: Chatbot tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng mong mu·ªën: {repr(response)}"


        else:
            # N·∫øu ch∆∞a c√≥ chatbot th·∫≠t ho·∫∑c import th·∫•t b·∫°i, tr·∫£ v·ªÅ gi·∫£ l·∫≠p
            answer = f"(Chatbot m√¥ ph·ªèng - L·ªñI BACKEND: Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng app.chatbot) B·∫°n h·ªèi: '{question}'"

        return {"answer": answer}

    except Exception as e:
        # Tr·∫£ v·ªÅ l·ªói server 500 n·∫øu c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh g·ªçi chatbot
        # L·ªói n√†y R·∫§T QUAN TR·ªåNG: n√≥ l√† l·ªói t·ª´ logic/k·∫øt n·ªëi c·ªßa chatbot
        print(f"L·ªñI CHATBOT: {e}")
        # Ghi log chi ti·∫øt (v√≠ d·ª•: n·∫øu do thi·∫øu API key, l·ªói s·∫Ω n·∫±m ·ªü ƒë√¢y)
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω Chatbot: {str(e)}. Vui l√≤ng ki·ªÉm tra log backend c·ªßa b·∫°n.")


# ---------------------------------------
# 4Ô∏è‚É£ Kh·ªüi ƒë·ªông server Uvicorn (FastAPI)
# ---------------------------------------
# KH√îNG C·∫¶N ƒëo·∫°n n√†y khi deploy l√™n Render/Gunicorn/uvicorn (h·ªç s·∫Ω ch·∫°y l·ªánh: uvicorn main:app_fastapi --host 0.0.0.0 --port $PORT)
# Tuy nhi√™n, gi·ªØ l·∫°i ƒë·ªÉ d·ªÖ d√†ng ch·∫°y local
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    # D√πng "0.0.0.0" l√† t·ªët nh·∫•t cho c·∫£ local v√† deployment (ƒë·ªÉ Render ho·∫°t ƒë·ªông)
    uvicorn.run("main:app_fastapi", host="0.0.0.0", port=port, log_level="info", reload=True)